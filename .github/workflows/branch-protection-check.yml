# Validates branch protection settings weekly and creates issues if configuration problems are found.
# Checks for required settings like PR reviews, status checks, and other security configurations.
name: Branch Protection Check

on:
  schedule:
    - cron: "0 0 * * 1" # Weekly on Monday
  workflow_dispatch:

permissions:
  contents: read
  issues: write

concurrency:
  group: branch-protection-check-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  check:
    name: Check Branch Protection
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check branch protection rules
        uses: actions/github-script@v7
        with:
          script: |
            const branch = 'main';

            // Helper function to find or create/update issues (DRY principle)
            async function findOrCreateIssue(titleFragment, issueBody, labels) {
              const { data: existingIssues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'security,branch-protection',
                per_page: 10
              });

              const existingIssue = existingIssues.find(issue => 
                issue.title.includes(titleFragment)
              );

              if (existingIssue) {
                // Update existing issue
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: `## üîÑ Updated Check Results\n\n${issueBody}`
                });
                console.log(`Updated existing issue #${existingIssue.number}`);
              } else {
                // Create new issue
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `${titleFragment} for ${branch}`,
                  body: issueBody,
                  labels: labels
                });
                console.log('Created new issue');
              }
            }

            try {
              const { data: protection } = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branch
              });

              console.log('‚úÖ Branch protection is enabled for', branch);
              console.log('Protection rules:', JSON.stringify(protection, null, 2));

              // Check required settings
              const issues = [];

              if (!protection.required_pull_request_reviews) {
                issues.push('‚ùå Pull request reviews are not required');
              }

              if (!protection.enforce_admins?.enabled) {
                issues.push('‚ö†Ô∏è  Rules do not apply to administrators');
              }

              if (!protection.required_status_checks) {
                issues.push('‚ö†Ô∏è  No required status checks configured');
              }

              if (issues.length > 0) {
                console.log('\n‚ö†Ô∏è  Issues found:');
                issues.forEach(issue => console.log(issue));

                const issueBody = `## Branch Protection Check Results\n\nThe following issues were found with branch protection for \`${branch}\`:\n\n${issues.map(i => `- ${i}`).join('\n')}\n\n**Recommendations:**\n- Enable pull request reviews\n- Apply rules to administrators\n- Configure required status checks\n\n---\n*Automated check run on ${new Date().toISOString()}*`;

                await findOrCreateIssue('Branch Protection Configuration Issues', issueBody, ['security', 'branch-protection', 'chore']);
              } else {
                console.log('\n‚úÖ All branch protection checks passed!');
              }

            } catch (error) {
              if (error.status === 404) {
                console.error(`‚ùå No branch protection found for ${branch}`);

                const issueBody = `## ‚ö†Ô∏è  Branch Protection Missing\n\nBranch protection is not configured for \`${branch}\`.\n\n**Recommended settings:**\n- Require pull request reviews\n- Require status checks to pass\n- Enforce rules for administrators\n- Require linear history\n\n---\n*Automated check run on ${new Date().toISOString()}*`;

                await findOrCreateIssue('Branch Protection Not Configured', issueBody, ['security', 'branch-protection', 'priority: high']);
              } else {
                throw error;
              }
            }
